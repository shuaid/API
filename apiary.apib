FORMAT: 1A

# Company Directors API

## Introduction
With the Company Directors API, you can programmatically access various Company Directors' recources. 

## Current Version
The current version is listed below. Development on previous versions of the API will be limited to severe bug fixes only. 

| Version | Base URL | Status |
| ------ | ----------- | ------ |
| V1 | https://api.companydirectors.com.au/v1 | Current |

## Authentication
Company Directors API uses OAuth 2.0 Authorization. API calls are made on behalf of an authenticated user must include a token in the "Authorization" header. The token is aquired through Company Directors' Auth Server. 

```
Authorization: Bearer tokenString
```

For more information about authentication with Company Directors' Auth Server, see [Authenticate with Auth Server](https://developers.companydirectors.com.au/docs/authserver). 

## CORS
The API supports Cross Origin Resource Sharing (CORS) for AJAX requests from registered origin. 

Here's a sample request sent from a browser:

```
$ curl -i https://api.companydirectors.com.au/v1 -H "Origin: https://clientdomain.com"
HTTP/1.1 302 Found
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
```

This is what the CORS preflight request looks like:

```
$ curl -i https://api.companydirectors.com.au/v1 -H "Origin: https://clientdomain.com" -X OPTIONS
HTTP/1.1 204 No Content
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since
Access-Control-Allow-Methods: GET, POST
Access-Control-Max-Age: 86400
Access-Control-Allow-Credentials: true
```

## Media Types
This API uses the JSON media-type to represent resources states.

Requests with a message-body are using plain JSON to set or update resource states.

## Response Codes
The REST API responds to requests with standard HTTP status codes. Error messages are embedded in the JSON response in the event of a validation failure or when the API fails to process your request.

### Errors
The common HTTP Response Status Codes are used.

| Status Code | Description |
| ------ | ----------- |
| 401 Unauthorized | Authentication credentials were missing or incorrect.  |
| 403 Forbidden | The request has been refused or access is not allowed. |
| 404 Not Found | The resource you specified was not found. |
| 406 Not Acceptable | The format you requested is not available. |
| 500 Internal Server Error | A server error occurred. |

# Group Event

## Events [/events{?from}{?to}]
List of all available events within date range.

+ Model (application/json)

    + Body
    
        ```
    [
        {
        "id": "EV119761",
        "displayName": "Directors' Lunch with Elizabeth Proust AO FAICD",
        "dpd": 5,
        "quadrantName": "Organisational",
        "division": "NSW",
        "isMultisession": false,
        "beginDateTime": "2015-06-27T08:00:00+10:00",
        "timeZone": "(GMT+10:00) Canberra, Melbourne, Sydney",
        "venue": {
            "name": "The Ivy Room",
            "address": {
                "address1": "320 George St",
                "address2": "elit officia dolore amet incididunt tempor",
                "suburb": "SYDNEY",
                "state": "NSW",
                "postcode": "2000",
                "country": "Australia",
                "latitude": 151.207,
                "longitude": -33.866678
            }
        },
        "status": "Open"
        }
    ]
        ```
        
### /events{?from}{?to} [GET]

+ Parameters
    + from (optional, date, `2015-10-01`) ... Only Events from this date are returned.
    + to (optional, date, `2015-10-31`) ... Only Events to this date are returned.
    
+ Response 200

    [Events][]
    
## Search Events [/events/registered{?term}]
Search upcoming events by event name.

+ This method has not been implemented.

### /events/search{?term} [GET]

+ Parameters
    + term (required, string, `Directors+Briefing`) ... Search term (e.g. "Directors Briefing"). Make sure to URL encode the search term before making the request.
    
+ Response 200

    [Events][]

## Registered Events [/events/registered{?from}{?to}]
A list of registered events of the current authenticated user

+ Authentication required

### /events/registered{?from}{?to} [GET]


+ Parameters
    + from (optional, date, `2015-10-01`) ... Only Events from this date are returned.
    + to (optional, date, `2015-10-31`) ... Only Events to this date are returned.

+ Request

    + Headers

            Authorization: Bearer tokenString
    
+ Response 200

    [Events][]

## Event [/events/{eventId}]
Retrieves details of an event.

+ Parameters
    + eventId (required, string, `EV169971`) ... ID of an Event 

+ Model (application/json)

    + Body
    
        ```
        {
            "id": "EV169971",
            "displayName": "mollit enim velit dolore proident non excepteur proident",
            "description": "Consequat voluptate proident.\r\nIpsumu atm aute occaecat laboris.\r\n",
            "beginDateTime": "2015-10-13T23:41:24+00:00",
            "endDateTime": "2015-10-13T23:41:24+00:00",
            "arrivalDateTime": "2015-10-13T23:41:24+00:00",
            "dpd": 16,
            "quadrantName": "Individual",
            "timeZone": "(GMT+09:30) Adelaide",
            "division": "National",
            "venue": {
                name: "Hilton Bar",
                "address": {
                    "address1": "691 Jefferson Avenue",
                    "address2": "elit officia dolore amet incididunt tempor",
                    "suburb": "Fresno",
                    "state": "VIC",
                    "postcode": "2045",
                    "country": "Australia",
                    "latitude": -22.427564,
                    "longitude": 51.87248
                }
            },
            "isMultisession": false,
            "status": "open"
        }
        ```
        
### /events/{eventId} [GET]


+ Response 200

    [Event][]
   
## Sessions [/events/{eventId}/sessions]

Get a list of sessions for an event.

+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "EV122407",
                "displayName": "Director Nexus Meeting 1 Mr Rob Gerrand AM",
                "beginDateTime": "2015-02-06T08:00:00+11:00",
                "endDateTime": "2015-02-06T10:00:00+11:00",
                "timeZone": "(GMT+10:00) Canberra, Melbourne, Sydney",
                "status": "Open"
            }
        ]
        ```

### /events/{eventId}/sessions [GET]


+ Response 200

    [Sessions][]

## Session [/sessions/{sessionId}]

Retrieves details of a session.

+ Parameters
    + sessionId (required, string, `EV121339`) ... ID of a session 

+ Model (application/json)

    + Body
    
        ```
        {
            "id": "EV122407",
            "displayName": "Director Nexus Meeting 1 Mr Rob Gerrand AM",
            "description": "Director Nexus Meeting 1 Rob Gerrand AM in melbourne",
            "beginDateTime": "2015-02-06T08:00:00+11:00",
            "endDateTime": "2015-02-06T10:00:00+11:00",
            "timeZone": "(GMT+10:00) Canberra, Melbourne, Sydney",
            "status": "Open"
        }
        ```

### /sessions/{sessionId} [GET]


+ Response 200

    [Session][]

## Speakers [/events/{eventId}/speakers]
Get list of speakers presenting on the event.
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "1623965",
                "firstName": "Martinez",
                "lastName": "Mason",
                "salutation": "Dr",
                "postNominal": "FAICD",
                "honorifics": "AO",
                "photoUrl": "https://aicdmedia.blob.core.windows.net/speakerprofile/6d241263-ced9-e011-9297-00155d028901",
                "isMainSpeaker": true,
                "gender": "Male"
            }
        ]
        ```

### /events/{eventId}/speakers [GET]


+ Response 200

    [Speakers][]

## Speaker [/speakers/{speakerId}]
Get details of speakers.

+ Model (application/json)

    + Body
    
        ```
        {
            "id": "1304625",
            "firstName": "Martinez",
            "lastName": "Mason",
            "salutation": "Dr",
            "postNominal": "FAICD",
            "honorifics": "AO",
            "photoUrl": "https://aicdmedia.blob.core.windows.net/speakerprofile/6d241263-ced9-e011-9297-00155d028901",
            "bio": "Culpa voluptate veniam .\r\nExercitation ullamco qui.\r\n",
            "gender": "male"
        }
        ```

### /speakers/{speakerId} [GET]

+ Response 200

    [Speaker][]

## Attendees [/events/{eventId}/attendees]
List all attendees on an event. This will only works if requestor is registered to attend this particular event.
+ Authorization Required
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "1097543",
                "firstName": "Bettie",
                "lastName": "Davenport",
                "salutation": "Dr",
                "postNominal": "FAICD",
                "honorifics": "AO"
            }
        ]
        ```

### /events/{eventId}/attendees [GET]


+ Response 200

    [Attendees][]

## Attendee [/events/{eventId}/attendees/{attendeeId}]
Retrieve details of attendee of an event.
+ Authorization Required
+ Parameters
    + attendeeId (required, string, `1453064`) ... ID of an attendee. 

+ Model (application/json)

    + Body
    
        ```
        {
            "id": "1453064",
            "firstName": "Martinez",
            "lastName": "Mason",
            "salutation": "Dr",
            "postNominal": "FAICD",
            "honorifics": "AO",
            "jobTitle": "Managing Director",
            "organisation": "XYZ Enterprise Ltd",
            "bio": "Laborum fugiat laborum aliquip amet labore.\r\nLorem Lorem incididunt ex et cillum.\r\n",
            "photoUrl": "https://media.companydirectors.com.au/photos/2b0ejfnipb9.jpg",
            "linkedInUrl": "http://www.linkedin.com/in/nflepfd2t9",
            "twitterUrl": "http://www.twitter.com/zw8aw1p2e29",
            "facebookUrl": "http://www.facebook.com/juugwszia4i"
        }
        ```

### /events/{eventId}/attendees/{attendeeId} [GET]

+ Response 200

    [Attendee][]

## Sponsors [/events/{eventId}/sponsors]
Retrieves list of event sponsors.

+ Model (application/json)

    + Body
    
        ```
        [
            {
            "id": "500047",
            "name": "KPMG",
            "logoUrl": "https://aicdmedia.blob.core.windows.net/sponsorprofile/ed34c103-b398-e111-9466-00155d023490",
            "websiteUrl": "http://www.kpmg.com.au"
            }
        ]
        ```

### /events/{eventId}/sponsors [GET]

+ Response 200

    [Sponsors][]

## Administrators [/events/{eventId}/administrators]
Retrieves contact person or event administrator for the event.
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "firstName": "Claire",
                "lastName": "Bailey",
                "phone": "61 2 6583 3505",
                "email": "cbailey@aicd.com.com"
            
            }
        ]
        ```

### /events/{eventId}/administrators [GET]

+ Response 200 

    [Administrators][]

## Accommodation [/events/{eventId}/accommodation]
Retrieves accommodation details that attendee has booked for the particular event

+ Authentication required

+ Model (application/json)

    + Body
    
        ```
        {
            "hotelName": "Mandarin Oriental",
            "hotelAddress": {
                "address1": "691 Jefferson Avenue",
                "address2": "Elit officia dolore amet incididunt tempor",
                "suburb": "Fresno",
                "state": "VIC",
                "postcode": "2045",
                "country": "Australia",
                "latitude": -22.427564,
                "longitude": 51.87248
            },
            "phone": "+61 2 6583 3505",
            "roomName": "Deluxe Park View Room",
            "roomType": "Single",
            "checkinDateTime": "2015-10-14T00:03:48+00:00",
            "checkoutDateTime": "2015-10-16T00:03:48+00:00",
            "timeZone": "(GMT+09:30) Adelaide",
            "transportation": "For details on how to get to and from the hotel, please visit transportKL website and search via method of transport"
        }
        ```

### /events/{eventId}/accommodation [GET]

+ Response 200 

    [Accommodation][]

## Transportation [/events/{eveintId}/transportation]
Retrieves transportation details on how to get into the venue
+ Model (application/json)

    + Body
    
        ```
        {
            "description": "Pariatur ipsum aute sit eu ad.\r\nCommodo id laboris pariatur velit.\r\n"
        }
        ```  

### /events/{eveintId}/transportation [GET]

+ Response 200 

    [Transportation][]

## Notes [/events/{eventId}/note]
This method has not been implemented.
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "ffa0bd65-15ed-4280-bec1-ce401dd85dae",
                "content": "Ea ea laborum irure et pariatur.\r\nMagna occaecat qui nostrud commodo magna nulla.\r\n",
                "createdDateTme": "2014-10-14T00:03:48+00:00",
                "updatedDateTime": "2014-10-16T00:03:48+00:00"
            }
        ]
        ```  

### /events/{eventId}/notes [GET]

+ Response 200 

    [Notes][]

## Polls [/events/{eventId}/polls]
This method has not been implemented.
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "ffa0bd65-15ed-4280-bec1-ce401dd85dae",
                "pollUrl": "https://polls.companydirectors.com.au/5ad734909f"
            }
        ]
        ```  

### /events/{eventId}/polls [GET]

+ Response 200 

    [Polls][]

## Surveys [/events/{eventId}/surveys]
This method has not been implemented.
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "ffa0bd65-15ed-4280-bec1-ce401dd85dae",
                "surveyUrl": "https://surveys.companydirectors.com.au/5ad734909f"
            }
        ]
        ```  

### /events/{eventId}/surveys [GET]

+ Response 200 

    [Surveys][]

## Feeds [/events/{eventId}/feeds]
The feeds of posts (including status updates) published by event administrators.

+ Model (application/json)

    + Body
    
        ```
        [
            {
                "id": "3507845453",
                "feedUrl": "https://feeds.companydirectors.com.au/5ad734909f"
            }
        ]
        ```  

### /events/{eventId}/feeds [GET]

+ Response 200 

    [Feeds][]

## Hashtags [/events/{eventId}/hashtags]
Retrieves list of hashtags assigned to the event (without '#' symbol)
+ Model (application/json)

    + Body
    
        ```
        [
            {
                "hashtagName": "Conference2015"
            }
        ]
        ```

### /events/{eventId}/hashtags [GET]

+ Response 200 

    [Hashtags][]
    
# Group Profile

## DO Consent [/profile/do/consent]
DO consent status.

+ Authorization Required

+ Model (application/json)

    + Body
    
        ```
        {
            "consent": "accepted"
        }
        ```  
  
### /profile/do/consent [GET]

+ Request

    + Headers

            Authorization: Bearer tokenString
            
+ Response 200

    [DO Consent][]       

### /profile/do/consent [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer tokenString
 
    + Body
    
        ```
        {
            "consent": "accepted"
        }  
        
+ Response 201

    [DO Consent][]      